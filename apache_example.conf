# Example Apache Configuration for the AD User Management Flask App
#
# This configuration includes standard WSGI setup and an example for enabling
# Kerberos-based Single Sign-On (SSO).
#
# 1. Save this file as 'ad_manager.conf' in your Apache's sites-available directory.
#    (e.g., /etc/apache2/sites-available/ad_manager.conf on Debian/Ubuntu)
#
# 2. Customize the paths and names below to match your server's setup.
#
# 3. Enable required Apache modules:
#    - sudo a2enmod wsgi
#    - sudo a2enmod auth_kerb (if using Kerberos SSO)
#
# 4. Enable the site: sudo a2ensite ad_manager.conf
#
# 5. Restart Apache: sudo systemctl restart apache2

<VirtualHost *:80>
    ServerName ad-manager.your-domain.com
    ServerAdmin webmaster@localhost

    # ==========================================================================
    # WSGI Configuration to run the Flask App
    # ==========================================================================
    # Define the WSGI daemon process group
    # - 'ad_manager': A unique name for the process group.
    # - 'user'/'group': The system user/group to run the application as (e.g., www-data).
    # - 'python-home': The ABSOLUTE path to the Python virtual environment.
    WSGIDaemonProcess ad_manager user=www-data group=www-data threads=5 python-home=/var/www/html/ad_user_creator/venv

    # Map the root URL to the WSGI script
    # The path should be the ABSOLUTE path to the app.wsgi file.
    WSGIScriptAlias / /var/www/html/ad_user_creator/app.wsgi

    <Directory /var/www/html/ad_user_creator>
        # Allow the WSGI process to access this directory
        WSGIProcessGroup ad_manager
        WSGIApplicationGroup %{GLOBAL}
        Order deny,allow
        Allow from all
    </Directory>

    # Alias static files to be served directly by Apache for performance
    Alias /static /var/www/html/ad_user_creator/static
    <Directory /var/www/html/ad_user_creator/static>
        Require all granted
    </Directory>

    # ==========================================================================
    # Kerberos SSO Configuration
    # ==========================================================================
    # This section protects the /sso_login route, forcing Kerberos authentication.
    # When successful, Apache sets the REMOTE_USER environment variable, which
    # the Flask application uses to log the user in.
    #
    # IMPORTANT: This will only work if the client browser is configured for
    # integrated Windows Authentication with your domain.
    <Location /sso_login>
        AuthType Kerberos
        AuthName "Kerberos Single Sign-On"
        KrbMethodNegotiate On
        KrbMethodK5Passwd Off

        # Path to the keytab file generated from your AD for this service.
        # Ensure this file is readable by the Apache user (e.g., www-data).
        Krb5Keytab /etc/apache2/http.keytab

        # The Service Principal Name (SPN) for the web server.
        # This must match the SPN associated with the keytab.
        # Format: HTTP/your_server_fqdn@YOUR.REALM
        KrbServiceName HTTP/ad-manager.your-domain.com@YOUR.REALM

        Require valid-user
    </Location>

    # Log configuration
    ErrorLog ${APACHE_LOG_DIR}/ad_manager_error.log
    CustomLog ${APACHE_LOG_DIR}/ad_manager_access.log combined

</VirtualHost>